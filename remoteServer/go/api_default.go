/*
 * Music info
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"net/http"
	"time"
)

const (
	SongAdded = "the song is added"
)

func Info(w http.ResponseWriter, r *http.Request) {
	const op = "Info"
	log := SetupLogger()
	log = log.With(slog.String("op", op))
	var song SongData
	json.NewDecoder(r.Body).Decode(&song)

	log = log.With(slog.String("song", fmt.Sprintln(song.Group, song.Song)))

	ReqChan <- song
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	select {
	case resp := <-RespChan:
		if resp.Err != nil {
			log.Info(resp.Err.Error())
			w.WriteHeader(http.StatusBadRequest)
		} else {
			err := json.NewEncoder(w).Encode(resp.SongWithDetail)
			log.Info(SongAdded)
			if err != nil {
				w.WriteHeader(http.StatusInternalServerError)
				log.Debug(err.Error())
				return
			}
		}
	case <-time.After(time.Second * 5):
		w.WriteHeader(http.StatusInternalServerError)
	}
}
